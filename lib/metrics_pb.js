// source: metrics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.io.prometheus.client.Bucket', null, global);
goog.exportSymbol('proto.io.prometheus.client.Counter', null, global);
goog.exportSymbol('proto.io.prometheus.client.Exemplar', null, global);
goog.exportSymbol('proto.io.prometheus.client.Gauge', null, global);
goog.exportSymbol('proto.io.prometheus.client.Histogram', null, global);
goog.exportSymbol('proto.io.prometheus.client.LabelPair', null, global);
goog.exportSymbol('proto.io.prometheus.client.Metric', null, global);
goog.exportSymbol('proto.io.prometheus.client.MetricFamily', null, global);
goog.exportSymbol('proto.io.prometheus.client.MetricType', null, global);
goog.exportSymbol('proto.io.prometheus.client.Quantile', null, global);
goog.exportSymbol('proto.io.prometheus.client.Summary', null, global);
goog.exportSymbol('proto.io.prometheus.client.Untyped', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.LabelPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.LabelPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.LabelPair.displayName = 'proto.io.prometheus.client.LabelPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Gauge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.Gauge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Gauge.displayName = 'proto.io.prometheus.client.Gauge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Counter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.Counter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Counter.displayName = 'proto.io.prometheus.client.Counter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Quantile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.Quantile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Quantile.displayName = 'proto.io.prometheus.client.Quantile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.prometheus.client.Summary.repeatedFields_, null);
};
goog.inherits(proto.io.prometheus.client.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Summary.displayName = 'proto.io.prometheus.client.Summary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Untyped = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.Untyped, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Untyped.displayName = 'proto.io.prometheus.client.Untyped';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Histogram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.prometheus.client.Histogram.repeatedFields_, null);
};
goog.inherits(proto.io.prometheus.client.Histogram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Histogram.displayName = 'proto.io.prometheus.client.Histogram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.prometheus.client.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Bucket.displayName = 'proto.io.prometheus.client.Bucket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Exemplar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.prometheus.client.Exemplar.repeatedFields_, null);
};
goog.inherits(proto.io.prometheus.client.Exemplar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Exemplar.displayName = 'proto.io.prometheus.client.Exemplar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.Metric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.prometheus.client.Metric.repeatedFields_, null);
};
goog.inherits(proto.io.prometheus.client.Metric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.Metric.displayName = 'proto.io.prometheus.client.Metric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.prometheus.client.MetricFamily = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.prometheus.client.MetricFamily.repeatedFields_, null);
};
goog.inherits(proto.io.prometheus.client.MetricFamily, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.io.prometheus.client.MetricFamily.displayName = 'proto.io.prometheus.client.MetricFamily';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.LabelPair.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.LabelPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.LabelPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.LabelPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.LabelPair}
 */
proto.io.prometheus.client.LabelPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.LabelPair;
  return proto.io.prometheus.client.LabelPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.LabelPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.LabelPair}
 */
proto.io.prometheus.client.LabelPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.LabelPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.LabelPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.LabelPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.LabelPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.prometheus.client.LabelPair.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.prometheus.client.LabelPair} returns this
 */
proto.io.prometheus.client.LabelPair.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.LabelPair} returns this
 */
proto.io.prometheus.client.LabelPair.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.LabelPair.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.io.prometheus.client.LabelPair.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.prometheus.client.LabelPair} returns this
 */
proto.io.prometheus.client.LabelPair.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.LabelPair} returns this
 */
proto.io.prometheus.client.LabelPair.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.LabelPair.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Gauge.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Gauge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Gauge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Gauge.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Gauge}
 */
proto.io.prometheus.client.Gauge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Gauge;
  return proto.io.prometheus.client.Gauge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Gauge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Gauge}
 */
proto.io.prometheus.client.Gauge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Gauge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Gauge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Gauge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Gauge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.io.prometheus.client.Gauge.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Gauge} returns this
 */
proto.io.prometheus.client.Gauge.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Gauge} returns this
 */
proto.io.prometheus.client.Gauge.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Gauge.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Counter.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Counter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Counter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Counter.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    exemplar: (f = msg.getExemplar()) && proto.io.prometheus.client.Exemplar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Counter}
 */
proto.io.prometheus.client.Counter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Counter;
  return proto.io.prometheus.client.Counter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Counter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Counter}
 */
proto.io.prometheus.client.Counter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.io.prometheus.client.Exemplar;
      reader.readMessage(value,proto.io.prometheus.client.Exemplar.deserializeBinaryFromReader);
      msg.setExemplar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Counter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Counter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Counter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Counter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getExemplar();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.prometheus.client.Exemplar.serializeBinaryToWriter
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.io.prometheus.client.Counter.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Counter} returns this
 */
proto.io.prometheus.client.Counter.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Counter} returns this
 */
proto.io.prometheus.client.Counter.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Counter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Exemplar exemplar = 2;
 * @return {?proto.io.prometheus.client.Exemplar}
 */
proto.io.prometheus.client.Counter.prototype.getExemplar = function() {
  return /** @type{?proto.io.prometheus.client.Exemplar} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Exemplar, 2));
};


/**
 * @param {?proto.io.prometheus.client.Exemplar|undefined} value
 * @return {!proto.io.prometheus.client.Counter} returns this
*/
proto.io.prometheus.client.Counter.prototype.setExemplar = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Counter} returns this
 */
proto.io.prometheus.client.Counter.prototype.clearExemplar = function() {
  return this.setExemplar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Counter.prototype.hasExemplar = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Quantile.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Quantile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Quantile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Quantile.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantile: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Quantile}
 */
proto.io.prometheus.client.Quantile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Quantile;
  return proto.io.prometheus.client.Quantile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Quantile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Quantile}
 */
proto.io.prometheus.client.Quantile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantile(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Quantile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Quantile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Quantile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Quantile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double quantile = 1;
 * @return {number}
 */
proto.io.prometheus.client.Quantile.prototype.getQuantile = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Quantile} returns this
 */
proto.io.prometheus.client.Quantile.prototype.setQuantile = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Quantile} returns this
 */
proto.io.prometheus.client.Quantile.prototype.clearQuantile = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Quantile.prototype.hasQuantile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.io.prometheus.client.Quantile.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Quantile} returns this
 */
proto.io.prometheus.client.Quantile.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Quantile} returns this
 */
proto.io.prometheus.client.Quantile.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Quantile.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.prometheus.client.Summary.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sampleSum: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    quantileList: jspb.Message.toObjectList(msg.getQuantileList(),
    proto.io.prometheus.client.Quantile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Summary}
 */
proto.io.prometheus.client.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Summary;
  return proto.io.prometheus.client.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Summary}
 */
proto.io.prometheus.client.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSampleCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSampleSum(value);
      break;
    case 3:
      var value = new proto.io.prometheus.client.Quantile;
      reader.readMessage(value,proto.io.prometheus.client.Quantile.deserializeBinaryFromReader);
      msg.addQuantile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getQuantileList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.prometheus.client.Quantile.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sample_count = 1;
 * @return {number}
 */
proto.io.prometheus.client.Summary.prototype.getSampleCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Summary} returns this
 */
proto.io.prometheus.client.Summary.prototype.setSampleCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Summary} returns this
 */
proto.io.prometheus.client.Summary.prototype.clearSampleCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Summary.prototype.hasSampleCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double sample_sum = 2;
 * @return {number}
 */
proto.io.prometheus.client.Summary.prototype.getSampleSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Summary} returns this
 */
proto.io.prometheus.client.Summary.prototype.setSampleSum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Summary} returns this
 */
proto.io.prometheus.client.Summary.prototype.clearSampleSum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Summary.prototype.hasSampleSum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Quantile quantile = 3;
 * @return {!Array<!proto.io.prometheus.client.Quantile>}
 */
proto.io.prometheus.client.Summary.prototype.getQuantileList = function() {
  return /** @type{!Array<!proto.io.prometheus.client.Quantile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.prometheus.client.Quantile, 3));
};


/**
 * @param {!Array<!proto.io.prometheus.client.Quantile>} value
 * @return {!proto.io.prometheus.client.Summary} returns this
*/
proto.io.prometheus.client.Summary.prototype.setQuantileList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.prometheus.client.Quantile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.prometheus.client.Quantile}
 */
proto.io.prometheus.client.Summary.prototype.addQuantile = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.prometheus.client.Quantile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.prometheus.client.Summary} returns this
 */
proto.io.prometheus.client.Summary.prototype.clearQuantileList = function() {
  return this.setQuantileList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Untyped.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Untyped.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Untyped} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Untyped.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Untyped}
 */
proto.io.prometheus.client.Untyped.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Untyped;
  return proto.io.prometheus.client.Untyped.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Untyped} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Untyped}
 */
proto.io.prometheus.client.Untyped.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Untyped.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Untyped.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Untyped} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Untyped.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.io.prometheus.client.Untyped.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Untyped} returns this
 */
proto.io.prometheus.client.Untyped.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Untyped} returns this
 */
proto.io.prometheus.client.Untyped.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Untyped.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.prometheus.client.Histogram.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Histogram.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Histogram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Histogram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Histogram.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sampleSum: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    bucketList: jspb.Message.toObjectList(msg.getBucketList(),
    proto.io.prometheus.client.Bucket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Histogram}
 */
proto.io.prometheus.client.Histogram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Histogram;
  return proto.io.prometheus.client.Histogram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Histogram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Histogram}
 */
proto.io.prometheus.client.Histogram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSampleCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSampleSum(value);
      break;
    case 3:
      var value = new proto.io.prometheus.client.Bucket;
      reader.readMessage(value,proto.io.prometheus.client.Bucket.deserializeBinaryFromReader);
      msg.addBucket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Histogram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Histogram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Histogram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Histogram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getBucketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.prometheus.client.Bucket.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sample_count = 1;
 * @return {number}
 */
proto.io.prometheus.client.Histogram.prototype.getSampleCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Histogram} returns this
 */
proto.io.prometheus.client.Histogram.prototype.setSampleCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Histogram} returns this
 */
proto.io.prometheus.client.Histogram.prototype.clearSampleCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Histogram.prototype.hasSampleCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double sample_sum = 2;
 * @return {number}
 */
proto.io.prometheus.client.Histogram.prototype.getSampleSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Histogram} returns this
 */
proto.io.prometheus.client.Histogram.prototype.setSampleSum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Histogram} returns this
 */
proto.io.prometheus.client.Histogram.prototype.clearSampleSum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Histogram.prototype.hasSampleSum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Bucket bucket = 3;
 * @return {!Array<!proto.io.prometheus.client.Bucket>}
 */
proto.io.prometheus.client.Histogram.prototype.getBucketList = function() {
  return /** @type{!Array<!proto.io.prometheus.client.Bucket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.prometheus.client.Bucket, 3));
};


/**
 * @param {!Array<!proto.io.prometheus.client.Bucket>} value
 * @return {!proto.io.prometheus.client.Histogram} returns this
*/
proto.io.prometheus.client.Histogram.prototype.setBucketList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.prometheus.client.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.prometheus.client.Bucket}
 */
proto.io.prometheus.client.Histogram.prototype.addBucket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.prometheus.client.Bucket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.prometheus.client.Histogram} returns this
 */
proto.io.prometheus.client.Histogram.prototype.clearBucketList = function() {
  return this.setBucketList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    cumulativeCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    upperBound: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    exemplar: (f = msg.getExemplar()) && proto.io.prometheus.client.Exemplar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Bucket}
 */
proto.io.prometheus.client.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Bucket;
  return proto.io.prometheus.client.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Bucket}
 */
proto.io.prometheus.client.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUpperBound(value);
      break;
    case 3:
      var value = new proto.io.prometheus.client.Exemplar;
      reader.readMessage(value,proto.io.prometheus.client.Exemplar.deserializeBinaryFromReader);
      msg.setExemplar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getExemplar();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.prometheus.client.Exemplar.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 cumulative_count = 1;
 * @return {number}
 */
proto.io.prometheus.client.Bucket.prototype.getCumulativeCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Bucket} returns this
 */
proto.io.prometheus.client.Bucket.prototype.setCumulativeCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Bucket} returns this
 */
proto.io.prometheus.client.Bucket.prototype.clearCumulativeCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Bucket.prototype.hasCumulativeCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double upper_bound = 2;
 * @return {number}
 */
proto.io.prometheus.client.Bucket.prototype.getUpperBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Bucket} returns this
 */
proto.io.prometheus.client.Bucket.prototype.setUpperBound = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Bucket} returns this
 */
proto.io.prometheus.client.Bucket.prototype.clearUpperBound = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Bucket.prototype.hasUpperBound = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Exemplar exemplar = 3;
 * @return {?proto.io.prometheus.client.Exemplar}
 */
proto.io.prometheus.client.Bucket.prototype.getExemplar = function() {
  return /** @type{?proto.io.prometheus.client.Exemplar} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Exemplar, 3));
};


/**
 * @param {?proto.io.prometheus.client.Exemplar|undefined} value
 * @return {!proto.io.prometheus.client.Bucket} returns this
*/
proto.io.prometheus.client.Bucket.prototype.setExemplar = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Bucket} returns this
 */
proto.io.prometheus.client.Bucket.prototype.clearExemplar = function() {
  return this.setExemplar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Bucket.prototype.hasExemplar = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.prometheus.client.Exemplar.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Exemplar.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Exemplar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Exemplar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Exemplar.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelList: jspb.Message.toObjectList(msg.getLabelList(),
    proto.io.prometheus.client.LabelPair.toObject, includeInstance),
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Exemplar}
 */
proto.io.prometheus.client.Exemplar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Exemplar;
  return proto.io.prometheus.client.Exemplar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Exemplar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Exemplar}
 */
proto.io.prometheus.client.Exemplar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.prometheus.client.LabelPair;
      reader.readMessage(value,proto.io.prometheus.client.LabelPair.deserializeBinaryFromReader);
      msg.addLabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Exemplar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Exemplar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Exemplar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Exemplar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.prometheus.client.LabelPair.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LabelPair label = 1;
 * @return {!Array<!proto.io.prometheus.client.LabelPair>}
 */
proto.io.prometheus.client.Exemplar.prototype.getLabelList = function() {
  return /** @type{!Array<!proto.io.prometheus.client.LabelPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.prometheus.client.LabelPair, 1));
};


/**
 * @param {!Array<!proto.io.prometheus.client.LabelPair>} value
 * @return {!proto.io.prometheus.client.Exemplar} returns this
*/
proto.io.prometheus.client.Exemplar.prototype.setLabelList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.prometheus.client.LabelPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.prometheus.client.LabelPair}
 */
proto.io.prometheus.client.Exemplar.prototype.addLabel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.prometheus.client.LabelPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.prometheus.client.Exemplar} returns this
 */
proto.io.prometheus.client.Exemplar.prototype.clearLabelList = function() {
  return this.setLabelList([]);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.io.prometheus.client.Exemplar.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Exemplar} returns this
 */
proto.io.prometheus.client.Exemplar.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Exemplar} returns this
 */
proto.io.prometheus.client.Exemplar.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Exemplar.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.io.prometheus.client.Exemplar.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.io.prometheus.client.Exemplar} returns this
*/
proto.io.prometheus.client.Exemplar.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Exemplar} returns this
 */
proto.io.prometheus.client.Exemplar.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Exemplar.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.prometheus.client.Metric.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.Metric.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.Metric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.Metric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Metric.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelList: jspb.Message.toObjectList(msg.getLabelList(),
    proto.io.prometheus.client.LabelPair.toObject, includeInstance),
    gauge: (f = msg.getGauge()) && proto.io.prometheus.client.Gauge.toObject(includeInstance, f),
    counter: (f = msg.getCounter()) && proto.io.prometheus.client.Counter.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.io.prometheus.client.Summary.toObject(includeInstance, f),
    untyped: (f = msg.getUntyped()) && proto.io.prometheus.client.Untyped.toObject(includeInstance, f),
    histogram: (f = msg.getHistogram()) && proto.io.prometheus.client.Histogram.toObject(includeInstance, f),
    timestampMs: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.Metric}
 */
proto.io.prometheus.client.Metric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.Metric;
  return proto.io.prometheus.client.Metric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.Metric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.Metric}
 */
proto.io.prometheus.client.Metric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.prometheus.client.LabelPair;
      reader.readMessage(value,proto.io.prometheus.client.LabelPair.deserializeBinaryFromReader);
      msg.addLabel(value);
      break;
    case 2:
      var value = new proto.io.prometheus.client.Gauge;
      reader.readMessage(value,proto.io.prometheus.client.Gauge.deserializeBinaryFromReader);
      msg.setGauge(value);
      break;
    case 3:
      var value = new proto.io.prometheus.client.Counter;
      reader.readMessage(value,proto.io.prometheus.client.Counter.deserializeBinaryFromReader);
      msg.setCounter(value);
      break;
    case 4:
      var value = new proto.io.prometheus.client.Summary;
      reader.readMessage(value,proto.io.prometheus.client.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 5:
      var value = new proto.io.prometheus.client.Untyped;
      reader.readMessage(value,proto.io.prometheus.client.Untyped.deserializeBinaryFromReader);
      msg.setUntyped(value);
      break;
    case 7:
      var value = new proto.io.prometheus.client.Histogram;
      reader.readMessage(value,proto.io.prometheus.client.Histogram.deserializeBinaryFromReader);
      msg.setHistogram(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.Metric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.Metric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.Metric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.Metric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.prometheus.client.LabelPair.serializeBinaryToWriter
    );
  }
  f = message.getGauge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.prometheus.client.Gauge.serializeBinaryToWriter
    );
  }
  f = message.getCounter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.prometheus.client.Counter.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.prometheus.client.Summary.serializeBinaryToWriter
    );
  }
  f = message.getUntyped();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.io.prometheus.client.Untyped.serializeBinaryToWriter
    );
  }
  f = message.getHistogram();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.io.prometheus.client.Histogram.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * repeated LabelPair label = 1;
 * @return {!Array<!proto.io.prometheus.client.LabelPair>}
 */
proto.io.prometheus.client.Metric.prototype.getLabelList = function() {
  return /** @type{!Array<!proto.io.prometheus.client.LabelPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.prometheus.client.LabelPair, 1));
};


/**
 * @param {!Array<!proto.io.prometheus.client.LabelPair>} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setLabelList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.prometheus.client.LabelPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.prometheus.client.LabelPair}
 */
proto.io.prometheus.client.Metric.prototype.addLabel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.prometheus.client.LabelPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearLabelList = function() {
  return this.setLabelList([]);
};


/**
 * optional Gauge gauge = 2;
 * @return {?proto.io.prometheus.client.Gauge}
 */
proto.io.prometheus.client.Metric.prototype.getGauge = function() {
  return /** @type{?proto.io.prometheus.client.Gauge} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Gauge, 2));
};


/**
 * @param {?proto.io.prometheus.client.Gauge|undefined} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setGauge = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearGauge = function() {
  return this.setGauge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasGauge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Counter counter = 3;
 * @return {?proto.io.prometheus.client.Counter}
 */
proto.io.prometheus.client.Metric.prototype.getCounter = function() {
  return /** @type{?proto.io.prometheus.client.Counter} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Counter, 3));
};


/**
 * @param {?proto.io.prometheus.client.Counter|undefined} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setCounter = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearCounter = function() {
  return this.setCounter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasCounter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Summary summary = 4;
 * @return {?proto.io.prometheus.client.Summary}
 */
proto.io.prometheus.client.Metric.prototype.getSummary = function() {
  return /** @type{?proto.io.prometheus.client.Summary} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Summary, 4));
};


/**
 * @param {?proto.io.prometheus.client.Summary|undefined} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setSummary = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearSummary = function() {
  return this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Untyped untyped = 5;
 * @return {?proto.io.prometheus.client.Untyped}
 */
proto.io.prometheus.client.Metric.prototype.getUntyped = function() {
  return /** @type{?proto.io.prometheus.client.Untyped} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Untyped, 5));
};


/**
 * @param {?proto.io.prometheus.client.Untyped|undefined} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setUntyped = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearUntyped = function() {
  return this.setUntyped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasUntyped = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Histogram histogram = 7;
 * @return {?proto.io.prometheus.client.Histogram}
 */
proto.io.prometheus.client.Metric.prototype.getHistogram = function() {
  return /** @type{?proto.io.prometheus.client.Histogram} */ (
    jspb.Message.getWrapperField(this, proto.io.prometheus.client.Histogram, 7));
};


/**
 * @param {?proto.io.prometheus.client.Histogram|undefined} value
 * @return {!proto.io.prometheus.client.Metric} returns this
*/
proto.io.prometheus.client.Metric.prototype.setHistogram = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearHistogram = function() {
  return this.setHistogram(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasHistogram = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 timestamp_ms = 6;
 * @return {number}
 */
proto.io.prometheus.client.Metric.prototype.getTimestampMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.setTimestampMs = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.Metric} returns this
 */
proto.io.prometheus.client.Metric.prototype.clearTimestampMs = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.Metric.prototype.hasTimestampMs = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.prometheus.client.MetricFamily.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.prometheus.client.MetricFamily.prototype.toObject = function(opt_includeInstance) {
  return proto.io.prometheus.client.MetricFamily.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.prometheus.client.MetricFamily} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.MetricFamily.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    help: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    metricList: jspb.Message.toObjectList(msg.getMetricList(),
    proto.io.prometheus.client.Metric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.prometheus.client.MetricFamily}
 */
proto.io.prometheus.client.MetricFamily.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.prometheus.client.MetricFamily;
  return proto.io.prometheus.client.MetricFamily.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.prometheus.client.MetricFamily} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.prometheus.client.MetricFamily}
 */
proto.io.prometheus.client.MetricFamily.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHelp(value);
      break;
    case 3:
      var value = /** @type {!proto.io.prometheus.client.MetricType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.io.prometheus.client.Metric;
      reader.readMessage(value,proto.io.prometheus.client.Metric.deserializeBinaryFromReader);
      msg.addMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.prometheus.client.MetricFamily.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.prometheus.client.MetricFamily.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.prometheus.client.MetricFamily} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.prometheus.client.MetricFamily.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.io.prometheus.client.MetricType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMetricList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.io.prometheus.client.Metric.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.prometheus.client.MetricFamily.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.MetricFamily.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string help = 2;
 * @return {string}
 */
proto.io.prometheus.client.MetricFamily.prototype.getHelp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.setHelp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.clearHelp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.MetricFamily.prototype.hasHelp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MetricType type = 3;
 * @return {!proto.io.prometheus.client.MetricType}
 */
proto.io.prometheus.client.MetricFamily.prototype.getType = function() {
  return /** @type {!proto.io.prometheus.client.MetricType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.io.prometheus.client.MetricType} value
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.prometheus.client.MetricFamily.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Metric metric = 4;
 * @return {!Array<!proto.io.prometheus.client.Metric>}
 */
proto.io.prometheus.client.MetricFamily.prototype.getMetricList = function() {
  return /** @type{!Array<!proto.io.prometheus.client.Metric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.prometheus.client.Metric, 4));
};


/**
 * @param {!Array<!proto.io.prometheus.client.Metric>} value
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
*/
proto.io.prometheus.client.MetricFamily.prototype.setMetricList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.io.prometheus.client.Metric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.prometheus.client.Metric}
 */
proto.io.prometheus.client.MetricFamily.prototype.addMetric = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.io.prometheus.client.Metric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.io.prometheus.client.MetricFamily} returns this
 */
proto.io.prometheus.client.MetricFamily.prototype.clearMetricList = function() {
  return this.setMetricList([]);
};


/**
 * @enum {number}
 */
proto.io.prometheus.client.MetricType = {
  COUNTER: 0,
  GAUGE: 1,
  SUMMARY: 2,
  UNTYPED: 3,
  HISTOGRAM: 4
};

goog.object.extend(exports, proto.io.prometheus.client);
