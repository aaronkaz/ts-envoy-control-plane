// source: opencensus/proto/trace/v1/trace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var opencensus_proto_resource_v1_resource_pb = require('../../../../opencensus/proto/resource/v1/resource_pb.js');
goog.object.extend(proto, opencensus_proto_resource_v1_resource_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.opencensus.proto.trace.v1.AttributeValue', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.AttributeValue.ValueCase', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Module', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Attributes', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Link', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Link.Type', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Links', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.SpanKind', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvent', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvent.ValueCase', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.TimeEvents', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Tracestate', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Span.Tracestate.Entry', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.StackTrace', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.StackTrace.StackFrame', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.StackTrace.StackFrames', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.Status', null, global);
goog.exportSymbol('proto.opencensus.proto.trace.v1.TruncatableString', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.displayName = 'proto.opencensus.proto.trace.v1.Span';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.Tracestate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencensus.proto.trace.v1.Span.Tracestate.repeatedFields_, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.Tracestate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.Tracestate.displayName = 'proto.opencensus.proto.trace.v1.Span.Tracestate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.Tracestate.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.displayName = 'proto.opencensus.proto.trace.v1.Span.Tracestate.Entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.Attributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.Attributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.Attributes.displayName = 'proto.opencensus.proto.trace.v1.Span.Attributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencensus.proto.trace.v1.Span.TimeEvent.oneofGroups_);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.TimeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.TimeEvent.displayName = 'proto.opencensus.proto.trace.v1.Span.TimeEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.displayName = 'proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.displayName = 'proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencensus.proto.trace.v1.Span.TimeEvents.repeatedFields_, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.TimeEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.TimeEvents.displayName = 'proto.opencensus.proto.trace.v1.Span.TimeEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.Link.displayName = 'proto.opencensus.proto.trace.v1.Span.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Span.Links = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencensus.proto.trace.v1.Span.Links.repeatedFields_, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Span.Links, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Span.Links.displayName = 'proto.opencensus.proto.trace.v1.Span.Links';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Status.displayName = 'proto.opencensus.proto.trace.v1.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.AttributeValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_);
};
goog.inherits(proto.opencensus.proto.trace.v1.AttributeValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.AttributeValue.displayName = 'proto.opencensus.proto.trace.v1.AttributeValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.StackTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.StackTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.StackTrace.displayName = 'proto.opencensus.proto.trace.v1.StackTrace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.StackTrace.StackFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.StackTrace.StackFrame.displayName = 'proto.opencensus.proto.trace.v1.StackTrace.StackFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.opencensus.proto.trace.v1.StackTrace.StackFrames.repeatedFields_, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.StackTrace.StackFrames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.StackTrace.StackFrames.displayName = 'proto.opencensus.proto.trace.v1.StackTrace.StackFrames';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.Module = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.Module, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.Module.displayName = 'proto.opencensus.proto.trace.v1.Module';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.opencensus.proto.trace.v1.TruncatableString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.opencensus.proto.trace.v1.TruncatableString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.opencensus.proto.trace.v1.TruncatableString.displayName = 'proto.opencensus.proto.trace.v1.TruncatableString';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64(),
    tracestate: (f = msg.getTracestate()) && proto.opencensus.proto.trace.v1.Span.Tracestate.toObject(includeInstance, f),
    parentSpanId: msg.getParentSpanId_asB64(),
    name: (f = msg.getName()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    kind: jspb.Message.getFieldWithDefault(msg, 14, 0),
    startTime: (f = msg.getStartTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endTime: (f = msg.getEndTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && proto.opencensus.proto.trace.v1.Span.Attributes.toObject(includeInstance, f),
    stackTrace: (f = msg.getStackTrace()) && proto.opencensus.proto.trace.v1.StackTrace.toObject(includeInstance, f),
    timeEvents: (f = msg.getTimeEvents()) && proto.opencensus.proto.trace.v1.Span.TimeEvents.toObject(includeInstance, f),
    links: (f = msg.getLinks()) && proto.opencensus.proto.trace.v1.Span.Links.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.opencensus.proto.trace.v1.Status.toObject(includeInstance, f),
    resource: (f = msg.getResource()) && opencensus_proto_resource_v1_resource_pb.Resource.toObject(includeInstance, f),
    sameProcessAsParentSpan: (f = msg.getSameProcessAsParentSpan()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
    childSpanCount: (f = msg.getChildSpanCount()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span}
 */
proto.opencensus.proto.trace.v1.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span;
  return proto.opencensus.proto.trace.v1.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span}
 */
proto.opencensus.proto.trace.v1.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 15:
      var value = new proto.opencensus.proto.trace.v1.Span.Tracestate;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Tracestate.deserializeBinaryFromReader);
      msg.setTracestate(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentSpanId(value);
      break;
    case 4:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {!proto.opencensus.proto.trace.v1.Span.SpanKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndTime(value);
      break;
    case 7:
      var value = new proto.opencensus.proto.trace.v1.Span.Attributes;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 8:
      var value = new proto.opencensus.proto.trace.v1.StackTrace;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.StackTrace.deserializeBinaryFromReader);
      msg.setStackTrace(value);
      break;
    case 9:
      var value = new proto.opencensus.proto.trace.v1.Span.TimeEvents;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.TimeEvents.deserializeBinaryFromReader);
      msg.setTimeEvents(value);
      break;
    case 10:
      var value = new proto.opencensus.proto.trace.v1.Span.Links;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Links.deserializeBinaryFromReader);
      msg.setLinks(value);
      break;
    case 11:
      var value = new proto.opencensus.proto.trace.v1.Status;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 16:
      var value = new opencensus_proto_resource_v1_resource_pb.Resource;
      reader.readMessage(value,opencensus_proto_resource_v1_resource_pb.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 12:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setSameProcessAsParentSpan(value);
      break;
    case 13:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setChildSpanCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTracestate();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.opencensus.proto.trace.v1.Span.Tracestate.serializeBinaryToWriter
    );
  }
  f = message.getParentSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencensus.proto.trace.v1.Span.Attributes.serializeBinaryToWriter
    );
  }
  f = message.getStackTrace();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.opencensus.proto.trace.v1.StackTrace.serializeBinaryToWriter
    );
  }
  f = message.getTimeEvents();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.opencensus.proto.trace.v1.Span.TimeEvents.serializeBinaryToWriter
    );
  }
  f = message.getLinks();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.opencensus.proto.trace.v1.Span.Links.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.opencensus.proto.trace.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      opencensus_proto_resource_v1_resource_pb.Resource.serializeBinaryToWriter
    );
  }
  f = message.getSameProcessAsParentSpan();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getChildSpanCount();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.opencensus.proto.trace.v1.Span.SpanKind = {
  SPAN_KIND_UNSPECIFIED: 0,
  SERVER: 1,
  CLIENT: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.Tracestate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.Tracestate;
  return proto.opencensus.proto.trace.v1.Span.Tracestate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.Span.Tracestate.Entry;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.Tracestate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.Tracestate.Entry;
  return proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry} returns this
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry} returns this
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.Entry.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Entry entries = 1;
 * @return {!Array<!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry>}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencensus.proto.trace.v1.Span.Tracestate.Entry, 1));
};


/**
 * @param {!Array<!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry>} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate} returns this
*/
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate.Entry}
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencensus.proto.trace.v1.Span.Tracestate.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opencensus.proto.trace.v1.Span.Tracestate} returns this
 */
proto.opencensus.proto.trace.v1.Span.Tracestate.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.Attributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.Attributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Attributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeMapMap: (f = msg.getAttributeMapMap()) ? f.toObject(includeInstance, proto.opencensus.proto.trace.v1.AttributeValue.toObject) : [],
    droppedAttributesCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.Attributes}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.Attributes;
  return proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.Attributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.Attributes}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAttributeMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.opencensus.proto.trace.v1.AttributeValue.deserializeBinaryFromReader, "", new proto.opencensus.proto.trace.v1.AttributeValue());
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroppedAttributesCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.Attributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.Attributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Attributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.opencensus.proto.trace.v1.AttributeValue.serializeBinaryToWriter);
  }
  f = message.getDroppedAttributesCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * map<string, AttributeValue> attribute_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.opencensus.proto.trace.v1.AttributeValue>}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.getAttributeMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.opencensus.proto.trace.v1.AttributeValue>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.opencensus.proto.trace.v1.AttributeValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.opencensus.proto.trace.v1.Span.Attributes} returns this
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.clearAttributeMapMap = function() {
  this.getAttributeMapMap().clear();
  return this;};


/**
 * optional int32 dropped_attributes_count = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.getDroppedAttributesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Attributes} returns this
 */
proto.opencensus.proto.trace.v1.Span.Attributes.prototype.setDroppedAttributesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.ValueCase = {
  VALUE_NOT_SET: 0,
  ANNOTATION: 2,
  MESSAGE_EVENT: 3
};

/**
 * @return {proto.opencensus.proto.trace.v1.Span.TimeEvent.ValueCase}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.getValueCase = function() {
  return /** @type {proto.opencensus.proto.trace.v1.Span.TimeEvent.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opencensus.proto.trace.v1.Span.TimeEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    annotation: (f = msg.getAnnotation()) && proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.toObject(includeInstance, f),
    messageEvent: (f = msg.getMessageEvent()) && proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.TimeEvent;
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.deserializeBinaryFromReader);
      msg.setAnnotation(value);
      break;
    case 3:
      var value = new proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.deserializeBinaryFromReader);
      msg.setMessageEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.TimeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAnnotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getMessageEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: (f = msg.getDescription()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && proto.opencensus.proto.trace.v1.Span.Attributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation;
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.opencensus.proto.trace.v1.Span.Attributes;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencensus.proto.trace.v1.Span.Attributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional TruncatableString description = 1;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.getDescription = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 1));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Attributes attributes = 2;
 * @return {?proto.opencensus.proto.trace.v1.Span.Attributes}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.getAttributes = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Attributes} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Attributes, 2));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Attributes|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uncompressedSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    compressedSize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent;
  return proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUncompressedSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompressedSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUncompressedSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCompressedSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type = {
  TYPE_UNSPECIFIED: 0,
  SENT: 1,
  RECEIVED: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.getType = function() {
  return /** @type {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 id = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 uncompressed_size = 3;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.getUncompressedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.setUncompressedSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 compressed_size = 4;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.getCompressedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.prototype.setCompressedSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Annotation annotation = 2;
 * @return {?proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.getAnnotation = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation, 2));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.TimeEvent.Annotation|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.setAnnotation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.opencensus.proto.trace.v1.Span.TimeEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.clearAnnotation = function() {
  return this.setAnnotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.hasAnnotation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageEvent message_event = 3;
 * @return {?proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.getMessageEvent = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent, 3));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.setMessageEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.opencensus.proto.trace.v1.Span.TimeEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.clearMessageEvent = function() {
  return this.setMessageEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvent.prototype.hasMessageEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.TimeEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeEventList: jspb.Message.toObjectList(msg.getTimeEventList(),
    proto.opencensus.proto.trace.v1.Span.TimeEvent.toObject, includeInstance),
    droppedAnnotationsCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    droppedMessageEventsCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.TimeEvents;
  return proto.opencensus.proto.trace.v1.Span.TimeEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.Span.TimeEvent;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.TimeEvent.deserializeBinaryFromReader);
      msg.addTimeEvent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroppedAnnotationsCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroppedMessageEventsCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.TimeEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.Span.TimeEvent.serializeBinaryToWriter
    );
  }
  f = message.getDroppedAnnotationsCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDroppedMessageEventsCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated TimeEvent time_event = 1;
 * @return {!Array<!proto.opencensus.proto.trace.v1.Span.TimeEvent>}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.getTimeEventList = function() {
  return /** @type{!Array<!proto.opencensus.proto.trace.v1.Span.TimeEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencensus.proto.trace.v1.Span.TimeEvent, 1));
};


/**
 * @param {!Array<!proto.opencensus.proto.trace.v1.Span.TimeEvent>} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents} returns this
*/
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.setTimeEventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.TimeEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvent}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.addTimeEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencensus.proto.trace.v1.Span.TimeEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.clearTimeEventList = function() {
  return this.setTimeEventList([]);
};


/**
 * optional int32 dropped_annotations_count = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.getDroppedAnnotationsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.setDroppedAnnotationsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 dropped_message_events_count = 3;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.getDroppedMessageEventsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.TimeEvents} returns this
 */
proto.opencensus.proto.trace.v1.Span.TimeEvents.prototype.setDroppedMessageEventsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceId: msg.getTraceId_asB64(),
    spanId: msg.getSpanId_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attributes: (f = msg.getAttributes()) && proto.opencensus.proto.trace.v1.Span.Attributes.toObject(includeInstance, f),
    tracestate: (f = msg.getTracestate()) && proto.opencensus.proto.trace.v1.Span.Tracestate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.Link}
 */
proto.opencensus.proto.trace.v1.Span.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.Link;
  return proto.opencensus.proto.trace.v1.Span.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.Link}
 */
proto.opencensus.proto.trace.v1.Span.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTraceId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpanId(value);
      break;
    case 3:
      var value = /** @type {!proto.opencensus.proto.trace.v1.Span.Link.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.opencensus.proto.trace.v1.Span.Attributes;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Attributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 5:
      var value = new proto.opencensus.proto.trace.v1.Span.Tracestate;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Tracestate.deserializeBinaryFromReader);
      msg.setTracestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSpanId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.opencensus.proto.trace.v1.Span.Attributes.serializeBinaryToWriter
    );
  }
  f = message.getTracestate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.opencensus.proto.trace.v1.Span.Tracestate.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.opencensus.proto.trace.v1.Span.Link.Type = {
  TYPE_UNSPECIFIED: 0,
  CHILD_LINKED_SPAN: 1,
  PARENT_LINKED_SPAN: 2
};

/**
 * optional bytes trace_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getTraceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes span_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getSpanId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes span_id = 2;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.opencensus.proto.trace.v1.Span.Link.Type}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getType = function() {
  return /** @type {!proto.opencensus.proto.trace.v1.Span.Link.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.Link.Type} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Attributes attributes = 4;
 * @return {?proto.opencensus.proto.trace.v1.Span.Attributes}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getAttributes = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Attributes} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Attributes, 4));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Attributes|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
*/
proto.opencensus.proto.trace.v1.Span.Link.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Tracestate tracestate = 5;
 * @return {?proto.opencensus.proto.trace.v1.Span.Tracestate}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.getTracestate = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Tracestate} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Tracestate, 5));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Tracestate|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
*/
proto.opencensus.proto.trace.v1.Span.Link.prototype.setTracestate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span.Link} returns this
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.clearTracestate = function() {
  return this.setTracestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.Link.prototype.hasTracestate = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencensus.proto.trace.v1.Span.Links.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Span.Links.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Span.Links} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Links.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.opencensus.proto.trace.v1.Span.Link.toObject, includeInstance),
    droppedLinksCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Span.Links}
 */
proto.opencensus.proto.trace.v1.Span.Links.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Span.Links;
  return proto.opencensus.proto.trace.v1.Span.Links.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Span.Links} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Span.Links}
 */
proto.opencensus.proto.trace.v1.Span.Links.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.Span.Link;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Span.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroppedLinksCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Span.Links.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Span.Links} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Span.Links.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.Span.Link.serializeBinaryToWriter
    );
  }
  f = message.getDroppedLinksCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Link link = 1;
 * @return {!Array<!proto.opencensus.proto.trace.v1.Span.Link>}
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.opencensus.proto.trace.v1.Span.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencensus.proto.trace.v1.Span.Link, 1));
};


/**
 * @param {!Array<!proto.opencensus.proto.trace.v1.Span.Link>} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Links} returns this
*/
proto.opencensus.proto.trace.v1.Span.Links.prototype.setLinkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencensus.proto.trace.v1.Span.Link}
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencensus.proto.trace.v1.Span.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opencensus.proto.trace.v1.Span.Links} returns this
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.clearLinkList = function() {
  return this.setLinkList([]);
};


/**
 * optional int32 dropped_links_count = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.getDroppedLinksCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Span.Links} returns this
 */
proto.opencensus.proto.trace.v1.Span.Links.prototype.setDroppedLinksCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes trace_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getTraceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes trace_id = 1;
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getTraceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTraceId()));
};


/**
 * optional bytes trace_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTraceId()`
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getTraceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTraceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.setTraceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes span_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getSpanId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes span_id = 2;
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpanId()));
};


/**
 * optional bytes span_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpanId()`
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.setSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Tracestate tracestate = 15;
 * @return {?proto.opencensus.proto.trace.v1.Span.Tracestate}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getTracestate = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Tracestate} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Tracestate, 15));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Tracestate|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setTracestate = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearTracestate = function() {
  return this.setTracestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasTracestate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes parent_span_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getParentSpanId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes parent_span_id = 3;
 * This is a type-conversion wrapper around `getParentSpanId()`
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getParentSpanId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentSpanId()));
};


/**
 * optional bytes parent_span_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentSpanId()`
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getParentSpanId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentSpanId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.setParentSpanId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional TruncatableString name = 4;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getName = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 4));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SpanKind kind = 14;
 * @return {!proto.opencensus.proto.trace.v1.Span.SpanKind}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getKind = function() {
  return /** @type {!proto.opencensus.proto.trace.v1.Span.SpanKind} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.opencensus.proto.trace.v1.Span.SpanKind} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional google.protobuf.Timestamp start_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp end_time = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getEndTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setEndTime = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearEndTime = function() {
  return this.setEndTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Attributes attributes = 7;
 * @return {?proto.opencensus.proto.trace.v1.Span.Attributes}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getAttributes = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Attributes} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Attributes, 7));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Attributes|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StackTrace stack_trace = 8;
 * @return {?proto.opencensus.proto.trace.v1.StackTrace}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getStackTrace = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.StackTrace} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.StackTrace, 8));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.StackTrace|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setStackTrace = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearStackTrace = function() {
  return this.setStackTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasStackTrace = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TimeEvents time_events = 9;
 * @return {?proto.opencensus.proto.trace.v1.Span.TimeEvents}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getTimeEvents = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.TimeEvents} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.TimeEvents, 9));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.TimeEvents|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setTimeEvents = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearTimeEvents = function() {
  return this.setTimeEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasTimeEvents = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Links links = 10;
 * @return {?proto.opencensus.proto.trace.v1.Span.Links}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getLinks = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Span.Links} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Span.Links, 10));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Span.Links|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setLinks = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearLinks = function() {
  return this.setLinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Status status = 11;
 * @return {?proto.opencensus.proto.trace.v1.Status}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getStatus = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Status, 11));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Status|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional opencensus.proto.resource.v1.Resource resource = 16;
 * @return {?proto.opencensus.proto.resource.v1.Resource}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getResource = function() {
  return /** @type{?proto.opencensus.proto.resource.v1.Resource} */ (
    jspb.Message.getWrapperField(this, opencensus_proto_resource_v1_resource_pb.Resource, 16));
};


/**
 * @param {?proto.opencensus.proto.resource.v1.Resource|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasResource = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional google.protobuf.BoolValue same_process_as_parent_span = 12;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getSameProcessAsParentSpan = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 12));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setSameProcessAsParentSpan = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearSameProcessAsParentSpan = function() {
  return this.setSameProcessAsParentSpan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasSameProcessAsParentSpan = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional google.protobuf.UInt32Value child_span_count = 13;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.opencensus.proto.trace.v1.Span.prototype.getChildSpanCount = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 13));
};


/**
 * @param {?proto.google.protobuf.UInt32Value|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
*/
proto.opencensus.proto.trace.v1.Span.prototype.setChildSpanCount = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Span} returns this
 */
proto.opencensus.proto.trace.v1.Span.prototype.clearChildSpanCount = function() {
  return this.setChildSpanCount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Span.prototype.hasChildSpanCount = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Status}
 */
proto.opencensus.proto.trace.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Status;
  return proto.opencensus.proto.trace.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Status}
 */
proto.opencensus.proto.trace.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.Status} returns this
 */
proto.opencensus.proto.trace.v1.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.opencensus.proto.trace.v1.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.opencensus.proto.trace.v1.Status} returns this
 */
proto.opencensus.proto.trace.v1.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.opencensus.proto.trace.v1.AttributeValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1,
  INT_VALUE: 2,
  BOOL_VALUE: 3,
  DOUBLE_VALUE: 4
};

/**
 * @return {proto.opencensus.proto.trace.v1.AttributeValue.ValueCase}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.getValueCase = function() {
  return /** @type {proto.opencensus.proto.trace.v1.AttributeValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.AttributeValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.AttributeValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.AttributeValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: (f = msg.getStringValue()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    intValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue}
 */
proto.opencensus.proto.trace.v1.AttributeValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.AttributeValue;
  return proto.opencensus.proto.trace.v1.AttributeValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.AttributeValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue}
 */
proto.opencensus.proto.trace.v1.AttributeValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.AttributeValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.AttributeValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.AttributeValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional TruncatableString string_value = 1;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.getStringValue = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 1));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
*/
proto.opencensus.proto.trace.v1.AttributeValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.clearStringValue = function() {
  return this.setStringValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 int_value = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bool_value = 3;
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double_value = 4;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.AttributeValue} returns this
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.opencensus.proto.trace.v1.AttributeValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.AttributeValue.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.StackTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.StackTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    stackFrames: (f = msg.getStackFrames()) && proto.opencensus.proto.trace.v1.StackTrace.StackFrames.toObject(includeInstance, f),
    stackTraceHashId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace}
 */
proto.opencensus.proto.trace.v1.StackTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.StackTrace;
  return proto.opencensus.proto.trace.v1.StackTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace}
 */
proto.opencensus.proto.trace.v1.StackTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.StackTrace.StackFrames;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.StackTrace.StackFrames.deserializeBinaryFromReader);
      msg.setStackFrames(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStackTraceHashId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.StackTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStackFrames();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.StackTrace.StackFrames.serializeBinaryToWriter
    );
  }
  f = message.getStackTraceHashId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.StackTrace.StackFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionName: (f = msg.getFunctionName()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    originalFunctionName: (f = msg.getOriginalFunctionName()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    fileName: (f = msg.getFileName()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    lineNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    columnNumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    loadModule: (f = msg.getLoadModule()) && proto.opencensus.proto.trace.v1.Module.toObject(includeInstance, f),
    sourceVersion: (f = msg.getSourceVersion()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.StackTrace.StackFrame;
  return proto.opencensus.proto.trace.v1.StackTrace.StackFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setFunctionName(value);
      break;
    case 2:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setOriginalFunctionName(value);
      break;
    case 3:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLineNumber(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setColumnNumber(value);
      break;
    case 6:
      var value = new proto.opencensus.proto.trace.v1.Module;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.Module.deserializeBinaryFromReader);
      msg.setLoadModule(value);
      break;
    case 7:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setSourceVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.StackTrace.StackFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getOriginalFunctionName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getFileName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getLineNumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getColumnNumber();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLoadModule();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.opencensus.proto.trace.v1.Module.serializeBinaryToWriter
    );
  }
  f = message.getSourceVersion();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
};


/**
 * optional TruncatableString function_name = 1;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getFunctionName = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 1));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setFunctionName = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.clearFunctionName = function() {
  return this.setFunctionName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.hasFunctionName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TruncatableString original_function_name = 2;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getOriginalFunctionName = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 2));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setOriginalFunctionName = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.clearOriginalFunctionName = function() {
  return this.setOriginalFunctionName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.hasOriginalFunctionName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TruncatableString file_name = 3;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getFileName = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 3));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setFileName = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.clearFileName = function() {
  return this.setFileName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 line_number = 4;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getLineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setLineNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 column_number = 5;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getColumnNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setColumnNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Module load_module = 6;
 * @return {?proto.opencensus.proto.trace.v1.Module}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getLoadModule = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.Module} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.Module, 6));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.Module|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setLoadModule = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.clearLoadModule = function() {
  return this.setLoadModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.hasLoadModule = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TruncatableString source_version = 7;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.getSourceVersion = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 7));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.setSourceVersion = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.clearSourceVersion = function() {
  return this.setSourceVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrame.prototype.hasSourceVersion = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.StackTrace.StackFrames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameList: jspb.Message.toObjectList(msg.getFrameList(),
    proto.opencensus.proto.trace.v1.StackTrace.StackFrame.toObject, includeInstance),
    droppedFramesCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.StackTrace.StackFrames;
  return proto.opencensus.proto.trace.v1.StackTrace.StackFrames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.StackTrace.StackFrame;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.StackTrace.StackFrame.deserializeBinaryFromReader);
      msg.addFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroppedFramesCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.StackTrace.StackFrames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.StackTrace.StackFrame.serializeBinaryToWriter
    );
  }
  f = message.getDroppedFramesCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated StackFrame frame = 1;
 * @return {!Array<!proto.opencensus.proto.trace.v1.StackTrace.StackFrame>}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.getFrameList = function() {
  return /** @type{!Array<!proto.opencensus.proto.trace.v1.StackTrace.StackFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.opencensus.proto.trace.v1.StackTrace.StackFrame, 1));
};


/**
 * @param {!Array<!proto.opencensus.proto.trace.v1.StackTrace.StackFrame>} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.setFrameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrame}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.addFrame = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.opencensus.proto.trace.v1.StackTrace.StackFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.clearFrameList = function() {
  return this.setFrameList([]);
};


/**
 * optional int32 dropped_frames_count = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.getDroppedFramesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace.StackFrames} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.StackFrames.prototype.setDroppedFramesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional StackFrames stack_frames = 1;
 * @return {?proto.opencensus.proto.trace.v1.StackTrace.StackFrames}
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.getStackFrames = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.StackTrace.StackFrames} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.StackTrace.StackFrames, 1));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.StackTrace.StackFrames|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace} returns this
*/
proto.opencensus.proto.trace.v1.StackTrace.prototype.setStackFrames = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.StackTrace} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.clearStackFrames = function() {
  return this.setStackFrames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.hasStackFrames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 stack_trace_hash_id = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.getStackTraceHashId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.StackTrace} returns this
 */
proto.opencensus.proto.trace.v1.StackTrace.prototype.setStackTraceHashId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.Module.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.Module.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.Module} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Module.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: (f = msg.getModule()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f),
    buildId: (f = msg.getBuildId()) && proto.opencensus.proto.trace.v1.TruncatableString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.Module}
 */
proto.opencensus.proto.trace.v1.Module.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.Module;
  return proto.opencensus.proto.trace.v1.Module.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.Module}
 */
proto.opencensus.proto.trace.v1.Module.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    case 2:
      var value = new proto.opencensus.proto.trace.v1.TruncatableString;
      reader.readMessage(value,proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader);
      msg.setBuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.Module.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.Module.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.Module.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
  f = message.getBuildId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter
    );
  }
};


/**
 * optional TruncatableString module = 1;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.Module.prototype.getModule = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 1));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Module} returns this
*/
proto.opencensus.proto.trace.v1.Module.prototype.setModule = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Module} returns this
 */
proto.opencensus.proto.trace.v1.Module.prototype.clearModule = function() {
  return this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Module.prototype.hasModule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TruncatableString build_id = 2;
 * @return {?proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.Module.prototype.getBuildId = function() {
  return /** @type{?proto.opencensus.proto.trace.v1.TruncatableString} */ (
    jspb.Message.getWrapperField(this, proto.opencensus.proto.trace.v1.TruncatableString, 2));
};


/**
 * @param {?proto.opencensus.proto.trace.v1.TruncatableString|undefined} value
 * @return {!proto.opencensus.proto.trace.v1.Module} returns this
*/
proto.opencensus.proto.trace.v1.Module.prototype.setBuildId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.opencensus.proto.trace.v1.Module} returns this
 */
proto.opencensus.proto.trace.v1.Module.prototype.clearBuildId = function() {
  return this.setBuildId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.opencensus.proto.trace.v1.Module.prototype.hasBuildId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.toObject = function(opt_includeInstance) {
  return proto.opencensus.proto.trace.v1.TruncatableString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.opencensus.proto.trace.v1.TruncatableString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.TruncatableString.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    truncatedByteCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.opencensus.proto.trace.v1.TruncatableString;
  return proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.opencensus.proto.trace.v1.TruncatableString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.opencensus.proto.trace.v1.TruncatableString}
 */
proto.opencensus.proto.trace.v1.TruncatableString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruncatedByteCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.opencensus.proto.trace.v1.TruncatableString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.opencensus.proto.trace.v1.TruncatableString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTruncatedByteCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.opencensus.proto.trace.v1.TruncatableString} returns this
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 truncated_byte_count = 2;
 * @return {number}
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.getTruncatedByteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.opencensus.proto.trace.v1.TruncatableString} returns this
 */
proto.opencensus.proto.trace.v1.TruncatableString.prototype.setTruncatedByteCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.opencensus.proto.trace.v1);
